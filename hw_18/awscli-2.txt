1.Create VPC
aws ec2 create-vpc --cidr-block 10.1.0.0/16
{
    "Vpc": {
        "CidrBlock": "10.1.0.0/16",
        "DhcpOptionsId": "dopt-0a276d0f7a026cd7b",
        "State": "pending",
        "VpcId": "vpc-08cdaf89df61d075b",
        "OwnerId": "781155352530",
        "InstanceTenancy": "default",
        "Ipv6CidrBlockAssociationSet": [],
        "CidrBlockAssociationSet": [
            {
                "AssociationId": "vpc-cidr-assoc-042812006325277a5",
                "CidrBlock": "10.1.0.0/16",
                "CidrBlockState": {
                    "State": "associated"
                }
            }
        ],
        "IsDefault": false
    }
}
2.Create public subnet
aws ec2 create-subnet --vpc-id vpc-08cdaf89df61d075b --cidr-block 10.1.1.0/24
{
    "Subnet": {
        "AvailabilityZone": "us-east-1a",
        "AvailabilityZoneId": "use1-az2",
        "AvailableIpAddressCount": 251,
        "CidrBlock": "10.1.1.0/24",
        "DefaultForAz": false,
        "MapPublicIpOnLaunch": false,
        "State": "available",
        "SubnetId": "subnet-0795a3d81d7232db3",
        "VpcId": "vpc-08cdaf89df61d075b",
        "OwnerId": "781155352530",
        "AssignIpv6AddressOnCreation": false,
        "Ipv6CidrBlockAssociationSet": [],
        "SubnetArn": "arn:aws:ec2:us-east-1:781155352530:subnet/subnet-0795a3d81d7232db3",
        "EnableDns64": false,
        "Ipv6Native": false,
        "PrivateDnsNameOptionsOnLaunch": {
            "HostnameType": "ip-name",
            "EnableResourceNameDnsARecord": false,
            "EnableResourceNameDnsAAAARecord": false
        }
    }
}
3.Create private subnet
aws ec2 create-subnet --vpc-id vpc-08cdaf89df61d075b --cidr-block 10.1.2.0/24
{
    "Subnet": {
        "AvailabilityZone": "us-east-1a",
        "AvailabilityZoneId": "use1-az2",
        "AvailableIpAddressCount": 251,
        "CidrBlock": "10.1.2.0/24",
        "DefaultForAz": false,
        "MapPublicIpOnLaunch": false,
        "State": "available",
        "SubnetId": "subnet-03958632edbfd9ea9",
        "VpcId": "vpc-08cdaf89df61d075b",
        "OwnerId": "781155352530",
        "AssignIpv6AddressOnCreation": false,
        "Ipv6CidrBlockAssociationSet": [],
        "SubnetArn": "arn:aws:ec2:us-east-1:781155352530:subnet/subnet-03958632edbfd9ea9",
        "EnableDns64": false,
        "Ipv6Native": false,
        "PrivateDnsNameOptionsOnLaunch": {
            "HostnameType": "ip-name",
            "EnableResourceNameDnsARecord": false,
            "EnableResourceNameDnsAAAARecord": false
        }
    }
}
4.Create internet gateway
aws ec2 create-internet-gateway
{
    "InternetGateway": {
        "Attachments": [],
        "InternetGatewayId": "igw-017306e1b2709e5e1",
        "OwnerId": "781155352530",
        "Tags": []
    }
}
5.Attach internet gateway
aws ec2 attach-internet-gateway --internet-gateway-id igw-017306e1b2709e5e1 --vpc-id vpc-08cdaf89df61d075b

6.Allocate Elastic IP for NAT Gateway
aws ec2 allocate-address
{
    "PublicIp": "3.213.189.231",
    "AllocationId": "eipalloc-07ae61be2afa38b81",
    "PublicIpv4Pool": "amazon",
    "NetworkBorderGroup": "us-east-1",
    "Domain": "vpc"
}
7.Create NAT Gateway in public subnet
aws ec2 create-nat-gateway --subnet-id subnet-03958632edbfd9ea9 --allocation-id eipalloc-07ae61be2afa38b81
{
    "ClientToken": "53efe1b7-e1fa-4252-8540-8b9887291ab5",
    "NatGateway": {
        "CreateTime": "2022-11-30T12:02:11+00:00",
        "NatGatewayAddresses": [
            {
                "AllocationId": "eipalloc-07ae61be2afa38b81"
            }
        ],
        "NatGatewayId": "nat-0e9fc9c827b9f5723",
        "State": "pending",
        "SubnetId": "subnet-03958632edbfd9ea9",
        "VpcId": "vpc-08cdaf89df61d075b",
        "ConnectivityType": "public"
    }
}
8.Create routing table for public subnet
aws ec2 create-route-table --vpc-id vpc-08cdaf89df61d075b
{
    "RouteTable": {
        "Associations": [],
        "PropagatingVgws": [],
        "RouteTableId": "rtb-0e687ec6c6509aa4a",
        "Routes": [
            {
                "DestinationCidrBlock": "10.1.0.0/16",
                "GatewayId": "local",
                "Origin": "CreateRouteTable",
                "State": "active"
            }
        ],
        "Tags": [],
        "VpcId": "vpc-08cdaf89df61d075b",
        "OwnerId": "781155352530"
    }
}
9.Create default route for public subnet
aws ec2 create-route --route-table-id rtb-0e687ec6c6509aa4a --destination-cidr-block 0.0.0.0/0 --gateway-id igw-017306e1b2709e5e1
{
    "Return": true
}
10.Associate routing table with public subnet
aws ec2 associate-route-table --route-table-id rtb-0e687ec6c6509aa4a --subnet-id subnet-0795a3d81d7232db3
{
    "AssociationId": "rtbassoc-0f3326960158441e9",
    "AssociationState": {
        "State": "associated"
    }
}
11.Configure auto assigning of public IP addresses
aws ec2 modify-subnet-attribute --subnet-id subnet-0795a3d81d7232db3 --map-public-ip-on-launch

12.Create routing table for private subnet
aws ec2 create-route-table --vpc-id vpc-08cdaf89df61d075b
{
    "RouteTable": {
        "Associations": [],
        "PropagatingVgws": [],
        "RouteTableId": "rtb-0e21459b59a512d71",
        "Routes": [
            {
                "DestinationCidrBlock": "10.1.0.0/16",
                "GatewayId": "local",
                "Origin": "CreateRouteTable",
                "State": "active"
            }
        ],
        "Tags": [],
        "VpcId": "vpc-08cdaf89df61d075b",
        "OwnerId": "781155352530"
    }
}
13.Create default route for private subnet
aws ec2 create-route --route-table-id rtb-0e21459b59a512d71 --destination-cidr-block 0.0.0.0/0 --nat-gateway-id nat-0e9fc9c827b9f5723
{
    "Return": true
}
14.Associate routing table with private subnet
aws ec2 associate-route-table --route-table-id rtb-0e21459b59a512d71 --subnet-id subnet-03958632edbfd9ea9
{
    "AssociationId": "rtbassoc-07bff2a12e8b4fa18",
    "AssociationState": {
        "State": "associated"
    }
}
15.Create security group for public subnet
aws ec2 create-security-group --group-name public-sg --description "Public security group" --vpc-id vpc-08cdaf89df61d075b
{
    "GroupId": "sg-09e937b981279e185"
}
16.Create security group for private subnet
aws ec2 create-security-group --group-name private-sg --description "Private security group" --vpc-id vpc-08cdaf89df61d075b
{
    "GroupId": "sg-01f9405213113626c"
}
17.Open port 22 on public subnet
aws ec2 authorize-security-group-ingress --group-id sg-09e937b981279e185 --protocol tcp --port 22 --cidr 0.0.0.0/0
{
    "Return": true,
    "SecurityGroupRules": [
        {
            "SecurityGroupRuleId": "sgr-0178bd57300a4f61f",
            "GroupId": "sg-09e937b981279e185",
            "GroupOwnerId": "781155352530",
            "IsEgress": false,
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIpv4": "0.0.0.0/0"
        }
    ]
}
18.Permit all traffic from public subnet to private subnet
aws ec2 authorize-security-group-ingress --group-id sg-01f9405213113626c --protocol all --source-group sg-09e937b981279e185
{
    "Return": true,
    "SecurityGroupRules": [
        {
            "SecurityGroupRuleId": "sgr-0c150ca71dadc04a0",
            "GroupId": "sg-01f9405213113626c",
            "GroupOwnerId": "781155352530",
            "IsEgress": false,
            "IpProtocol": "-1",
            "FromPort": -1,
            "ToPort": -1,
            "ReferencedGroupInfo": {
                "GroupId": "sg-09e937b981279e185",
                "UserId": "781155352530"
            }
        }
    ]
}
19.Run EC2 instance in the public subnet
aws ec2 run-instances --image-id ami-0cfcbf9074150a0fd --count 1 --instance-type t2.micro --key-name aws --security-group-ids sg-09e937b981279e185 --subnet-id subnet-0795a3d81d7232db3
{
    "Groups": [],
    "Instances": [
        {
            "AmiLaunchIndex": 0,
            "ImageId": "ami-0cfcbf9074150a0fd",
            "InstanceId": "i-063a6a07f253ab459",
            "InstanceType": "t2.micro",
            "KeyName": "aws",
            "LaunchTime": "2022-11-30T13:11:30+00:00",
            "Monitoring": {
                "State": "disabled"
            },
            "Placement": {
                "AvailabilityZone": "us-east-1a",
                "GroupName": "",
                "Tenancy": "default"
            },
            "PrivateDnsName": "ip-10-1-1-209.ec2.internal",
            "PrivateIpAddress": "10.1.1.209",
            "ProductCodes": [],
            "PublicDnsName": "",
            "State": {
                "Code": 0,
                "Name": "pending"
            },
            "StateTransitionReason": "",
            "SubnetId": "subnet-0795a3d81d7232db3",
            "VpcId": "vpc-08cdaf89df61d075b",
            "Architecture": "x86_64",
            "BlockDeviceMappings": [],
            "ClientToken": "d7fab36d-7a7c-4b68-b3dc-ed892688f833",
            "EbsOptimized": false,
            "EnaSupport": true,
            "Hypervisor": "xen",
            "NetworkInterfaces": [
                {
                    "Attachment": {
                        "AttachTime": "2022-11-30T13:11:30+00:00",
                        "AttachmentId": "eni-attach-0eef8cfaeae88e758",
                        "DeleteOnTermination": true,
                        "DeviceIndex": 0,
                        "Status": "attaching",
                        "NetworkCardIndex": 0
                    },
                    "Description": "",
                    "Groups": [
                        {
                            "GroupName": "public-sg",
                            "GroupId": "sg-09e937b981279e185"
                        }
                    ],
                    "Ipv6Addresses": [],
                    "MacAddress": "12:9d:34:b7:a8:79",
                    "NetworkInterfaceId": "eni-027a76ed28ed9e15a",
                    "OwnerId": "781155352530",
                    "PrivateIpAddress": "10.1.1.209",
                    "PrivateIpAddresses": [
                        {
                            "Primary": true,
                            "PrivateIpAddress": "10.1.1.209"
                        }
                    ],
                    "SourceDestCheck": true,
                    "Status": "in-use",
                    "SubnetId": "subnet-0795a3d81d7232db3",
                    "VpcId": "vpc-08cdaf89df61d075b",
                    "InterfaceType": "interface"
                }
            ],
            "RootDeviceName": "/dev/sda1",
            "RootDeviceType": "ebs",
            "SecurityGroups": [
                {
                {
                    "GroupName": "public-sg",
                    "GroupId": "sg-09e937b981279e185"
                }
            ],
            "SourceDestCheck": true,
            "StateReason": {
                "Code": "pending",
                "Message": "pending"
            },
            "VirtualizationType": "hvm",
            "CpuOptions": {
                "CoreCount": 1,
                "ThreadsPerCore": 1
            },
            "CapacityReservationSpecification": {
                "CapacityReservationPreference": "open"
            },
            "MetadataOptions": {
                "State": "pending",
                "HttpTokens": "optional",
                "HttpPutResponseHopLimit": 1,
                "HttpEndpoint": "enabled",
                "HttpProtocolIpv6": "disabled",
                "InstanceMetadataTags": "disabled"
            },
            "EnclaveOptions": {
                "Enabled": false
            },
            "PrivateDnsNameOptions": {
                "HostnameType": "ip-name",
                "EnableResourceNameDnsARecord": false,
                "EnableResourceNameDnsAAAARecord": false
            },
            "MaintenanceOptions": {
                "AutoRecovery": "default"
            }
        }
    ],
    "OwnerId": "781155352530",
    "ReservationId": "r-02a1845cc86689532"
}
20.Run EC2 instance in the private subnet
aws ec2 run-instances --image-id ami-0cfcbf9074150a0fd --count 1 --instance-type t2.micro --key-name aws --security-group-ids sg-01f9405213113626c --subnet-id subnet-03958632edbfd9ea9
{
    "Groups": [],
    "Instances": [
        {
            "AmiLaunchIndex": 0,
            "ImageId": "ami-0cfcbf9074150a0fd",
            "InstanceId": "i-0371e6cb91a0a5b8e",
            "InstanceType": "t2.micro",
            "KeyName": "aws",
            "LaunchTime": "2022-11-30T13:17:32+00:00",
            "Monitoring": {
                "State": "disabled"
            },
            "Placement": {
                "AvailabilityZone": "us-east-1a",
                "GroupName": "",
                "Tenancy": "default"
            },
            "PrivateDnsName": "ip-10-1-2-44.ec2.internal",
            "PrivateIpAddress": "10.1.2.44",
            "ProductCodes": [],
            "PublicDnsName": "",
            "State": {
                "Code": 0,
                "Name": "pending"
            },
            "StateTransitionReason": "",
            "SubnetId": "subnet-03958632edbfd9ea9",
            "VpcId": "vpc-08cdaf89df61d075b",
            "Architecture": "x86_64",
            "BlockDeviceMappings": [],
            "ClientToken": "60980197-a119-4fa8-b643-ff62490a01a9",
            "EbsOptimized": false,
            "EnaSupport": true,
            "Hypervisor": "xen",
            "NetworkInterfaces": [
                {
                    "Attachment": {
                        "AttachTime": "2022-11-30T13:17:32+00:00",
                        "AttachmentId": "eni-attach-0c8f7435a1e8e6b0e",
                        "DeleteOnTermination": true,
                        "DeviceIndex": 0,
                        "Status": "attaching",
                        "NetworkCardIndex": 0
                    },
                    "Description": "",
                    "Groups": [
                        {
                            "GroupName": "private-sg",
                            "GroupId": "sg-01f9405213113626c"
                        }
                    ],
                    "Ipv6Addresses": [],
                    "MacAddress": "12:e8:e1:75:c0:6f",
                    "NetworkInterfaceId": "eni-0af489385c41e8dec",
                    "OwnerId": "781155352530",
                    "PrivateIpAddress": "10.1.2.44",
                    "PrivateIpAddresses": [
                        {
                            "Primary": true,
                            "PrivateIpAddress": "10.1.2.44"
                        }
                    ],
                    "SourceDestCheck": true,
                    "Status": "in-use",
                    "SubnetId": "subnet-03958632edbfd9ea9",
                    "VpcId": "vpc-08cdaf89df61d075b",
                    "InterfaceType": "interface"
                }
            ],
            "RootDeviceName": "/dev/sda1",
            "RootDeviceType": "ebs",
            "SecurityGroups": [
                {
                {
                    "GroupName": "private-sg",
                    "GroupId": "sg-01f9405213113626c"
                }
            ],
            "SourceDestCheck": true,
            "StateReason": {
                "Code": "pending",
                "Message": "pending"
            },
            "VirtualizationType": "hvm",
            "CpuOptions": {
                "CoreCount": 1,
                "ThreadsPerCore": 1
            },
            "CapacityReservationSpecification": {
                "CapacityReservationPreference": "open"
            },
            "MetadataOptions": {
                "State": "pending",
                "HttpTokens": "optional",
                "HttpPutResponseHopLimit": 1,
                "HttpEndpoint": "enabled",
                "HttpProtocolIpv6": "disabled",
                "InstanceMetadataTags": "disabled"
            },
            "EnclaveOptions": {
                "Enabled": false
            },
            "PrivateDnsNameOptions": {
                "HostnameType": "ip-name",
                "EnableResourceNameDnsARecord": false,
                "EnableResourceNameDnsAAAARecord": false
            },
            "MaintenanceOptions": {
                "AutoRecovery": "default"
            }
        }
    ],
    "OwnerId": "781155352530",
    "ReservationId": "r-0ba347dcdac4960f8"
}
21.Connect to the instance in the public subnet and check Internet connectivity
aws ec2 describe-instances --instance-ids i-063a6a07f253ab459 | jq -r '.Reservations[] | .Instances[] | .PublicIpAddress'
52.0.169.49

ssh -i aws.pem ubuntu@52.0.169.49

22.Connect to the instance in the private subnet and check Internet connectivity

Attempt to get public ip
aws ec2 describe-instances --instance-ids i-0371e6cb91a0a5b8e | jq -r '.Reservations[] | .Instances[] | .PublicIpAddress'
-null-

Get private ip
aws ec2 describe-instances --instance-ids i-0371e6cb91a0a5b8e | jq -r '.Reservations[] | .Instances[] | .PrivateIpAddress'
10.1.2.44

Copy the key to the public instance
scp -i aws.pem aws.pem ubuntu@52.0.169.49:~/aws.pem

Logging in from a public instance to private
ubuntu@52.0.169.49:~$ ssh -i aws.pem ubuntu@10.1.2.44
